{"ast":null,"code":"var _jsxFileName = \"D:\\\\all-react-apps\\\\chatboat_app\\\\src\\\\Components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./chat.css\";\nimport Robo from \"./robo.png\";\nimport Send from \"./send.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hi! How can I help you?\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [customReplies, setCustomReplies] = useState({});\n  const botReplies = [\"I'm here to help!\", \"Can you please clarify?\", \"That's interesting!\", \"Let me think about that...\", \"I'm not sure, but I'll try!\"];\n  useEffect(() => {\n    fetch(\"/data.json\").then(response => response.json()).then(data => setCustomReplies(data));\n  }, []);\n  const handleSend = () => {\n    if (input.trim() === \"\") return;\n    const userMessage = {\n      sender: \"user\",\n      text: input\n    };\n    const lowerInput = input.trim().toLowerCase();\n    const botReply = customReplies[lowerInput] || botReplies[Math.floor(Math.random() * botReplies.length)];\n    const botMessage = {\n      sender: \"bot\",\n      text: botReply\n    };\n    setMessages(prev => [...prev, userMessage, botMessage]);\n    setInput(\"\");\n  };\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\") handleSend();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: Robo,\n      alt: \"robot\",\n      id: \"robo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"heading\",\n      children: \"Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender === \"user\" ? \"user\" : \"bot\"}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        id: \"btn\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Send,\n          alt: \"sendbutton\",\n          id: \"st\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"BTFR0dEbBnq5TyHkTSWbRLAqtsE=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","Robo","Send","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","input","setInput","customReplies","setCustomReplies","botReplies","fetch","then","response","json","data","handleSend","trim","userMessage","lowerInput","toLowerCase","botReply","Math","floor","random","length","botMessage","prev","handleKeyDown","e","key","className","children","src","alt","id","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","placeholder","value","onChange","target","onKeyDown","onClick","_c","$RefreshReg$"],"sources":["D:/all-react-apps/chatboat_app/src/Components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./chat.css\";\r\nimport Robo from \"./robo.png\";\r\nimport Send from \"./send.jpg\";\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    { sender: \"bot\", text: \"Hi! How can I help you?\" },\r\n  ]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [customReplies, setCustomReplies] = useState({});\r\n\r\n  const botReplies = [\r\n    \"I'm here to help!\",\r\n    \"Can you please clarify?\",\r\n    \"That's interesting!\",\r\n    \"Let me think about that...\",\r\n    \"I'm not sure, but I'll try!\",\r\n  ];\r\n\r\n  useEffect(() => {\r\n    fetch(\"/data.json\")\r\n      .then((response) => response.json())\r\n      .then((data) => setCustomReplies(data))\r\n  }, []);\r\n\r\n  const handleSend = () => {\r\n    if (input.trim() === \"\") return;\r\n\r\n    const userMessage = { sender: \"user\", text: input };\r\n    const lowerInput = input.trim().toLowerCase();\r\n\r\n    const botReply =\r\n      customReplies[lowerInput] ||\r\n      botReplies[Math.floor(Math.random() * botReplies.length)];\r\n\r\n    const botMessage = { sender: \"bot\", text: botReply };\r\n\r\n    setMessages((prev) => [...prev, userMessage, botMessage]);\r\n    setInput(\"\");\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") handleSend();\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <img src={Robo} alt=\"robot\" id=\"robo\" />\r\n      <h2 id=\"heading\">Chatbot</h2>\r\n      <div className=\"chatbox\">\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${msg.sender === \"user\" ? \"user\" : \"bot\"}`}\r\n          >\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"input-box\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type a message...\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n        />\r\n        <button onClick={handleSend} id=\"btn\">\r\n          <img src={Send} alt=\"sendbutton\" id=\"st\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}